#!/usr/bin/env python 
import subprocess, argparse
import sys
import copy
import numpy
import datetime
from scipy import stats

performance_counters = map(
    lambda (code, mnemonic, description): (code.lower(), mnemonic, description), 
[
    ("r003C:u", "cycles:u", "UnHalted Core Cycles"),
    ("r013C:u", "bus-cycles:u", "UnHalted Reference Cycles"),
    ("r00C0:u", "instructions:u", "Instruction Retired"),
    ("r4F2E:u", "cache-references:u", "LLC Reference"),
    ("r412E:u", "cache-misses:u", "LLC Misses"),
    ("r00C4:u", "branch-instructions:u", "Branch Instruction Retired"),
    ("r00C5:u", "branch-misses:u", "Branch Misses Retired"),
    ("r0203:u", "", "LD_BLOCKS.STORE_FORWARD"),
    ("r0105:u", "", "MISALIGN_MEM_REF.LOADS"),
    ("r0205:u", "", "MISALIGN_MEM_REF.STORES"),
    ("r0107:u", "", "LD_BLOCKS_PARTIAL.ADDRESS_ALIAS"),
    ("r8108:u", "", "DTLB_LOAD_MISSES.MISS_CAUSES_A_WALK"),
    ("r8208:u", "", "DTLB_LOAD_MISSES.WALK_COMPLETED"),
    ("r8408:u", "", "DTLB_LOAD_MISSES.WALK_DURATION"),
    ("r010E:u", "", "UOPS_ISSUED.ANY"),
    ("r100E:u", "", "UOPS_ISSUED.FLAGS_MERGE"),
    ("r200E:u", "", "UOPS_ISSUED.SLOW_LEA"),
    ("r400E:u", "", "UOPS_ISSUED.SiNGLE_MUL"),
    ("r0114:u", "", "ARITH.FPU_DIV_ACTIVE"),
    ("r0120:u", "", "LSD_OVERFLOW"),
    ("r0124:u", "", "L2_RQSTS.DEMAND_DATA_RD_HIT"),
    ("r0324:u", "", "L2_RQSTS.ALL_DEMAND_DATA_RD"),
    ("r0424:u", "", "L2_RQSTS.RFO_HITS"),
    ("r0824:u", "", "L2_RQSTS.RFO_MISS"),
    ("r0C24:u", "", "L2_RQSTS.ALL_RFO"),
    ("r1024:u", "", "L2_RQSTS.CODE_RD_HIT"),
    ("r2024:u", "", "L2_RQSTS.CODE_RD_MISS"),
    ("r3024:u", "", "L2_RQSTS.ALL_CODE_RD"),
    ("r4024:u", "", "L2_RQSTS.PF_HIT"),
    ("r8024:u", "", "L2_RQSTS.PF_MISS"),
    ("rC024:u", "", "L2_RQSTS.ALL_PF"),
    ("r0127:u", "", "L2_STORE_LOCK_RQSTS.MISS"),
    ("r0827:u", "", "L2_STORE_LOCK_RQSTS.HIT_M"),
    ("r0F27:u", "", "L2_STORE_LOCK_RQSTS.ALL"),
    ("r0128:u", "", "L2_L1D_WB_RQSTS.MISS"),
    ("r0428:u", "", "L2_L1D_WB_RQSTS.HIT_E"),
    ("r0828:u", "", "L2_L1D_WB_RQSTS.HIT_M"),
    ("r0F28:u", "", "L2_L1D_WB_RQSTS.ALL"),
    ("r412E:u", "", "LONGEST_LAT_CACHE.MISS"),
    ("r4F2E:u", "", "LONGEST_LAT_CACHE.REFERENCE"),
    ("r003C:u", "", "CPU_CLK_UNHALTED.THREAD_P"),
    ("r013C:u", "", "CPU_CLK_THREAD_UNHALTED.REF_XCLK"),
    ("r0148:u", "", "L1D_PEND_MISS.PENDING"),
    ("r0149:u", "", "DTLB_STORE_MISSES.MISS_CAUSES_A_WALK"),
    ("r0249:u", "", "DTLB_STORE_MISSES.WALK_COMPLETED"),
    ("r0449:u", "", "DTLB_STORE_MISSES.WALK_DURATION"),
    ("r1049:u", "", "DTLB_STORE_MISSES.STLB_HIT"),
    ("r014C:u", "", "LOAD_HIT_PRE.SW_PF"),
    ("r024C:u", "", "LOAD_HIT_PRE.HW_PF"),
    ("r0151:u", "", "L1D.REPLACEMENT"),
    ("r0158:u", "", "MOVE_ELIMINATION.INT_ELIMINATED"),
    ("r0258:u", "", "MOVE_ELIMINATION.SIMD_ELIMINATED"),
    ("r0458:u", "", "MOVE_ELIMINATION.INT_NOT_ELIMINATED"),
    ("r0858:u", "", "MOVE_ELIMINATION.SIMD_NOT_ELIMINATED"),
    ("r015C:u", "", "CPL_CYCLES.RING0"),
    ("r025C:u", "", "CPL_CYCLES.RING123"),
    ("r015E:u", "", "RS_EVENTS.EMPTY_CYCLES"),
    ("r045F:u", "", "DTLB_LOAD_MISSES.STLB_HIT"),
    ("r0160:u", "", "OFFCORE_REQUESTS_OUTSTANDING.DEMAND_DATA_RD"),
    ("r0260:u", "", "OFFCORE_REQUESTS_OUTSTANDING.DEMAND_CODE_RD"),
    ("r0460:u", "", "OFFCORE_REQUESTS_OUTSTANDING.DEMAND_RFO"),
    ("r0860:u", "", "OFFCORE_REQUESTS_OUTSTANDING.ALL_DATA_RD"),
    ("r0163:u", "", "LOCK_CYCLES.SPLIT_LOCK_UC_LOCK_DURATION"),
    ("r0263:u", "", "LOCK_CYCLES.CACHE_LOCK_DURATION"),
    ("r0279:u", "", "IDQ.EMPTY"),
    ("r0479:u", "", "IDQ.MITE_UOPS"),
    ("r0879:u", "", "IDQ.DSB_UOPS"),
    ("r1079:u", "", "IDQ.MS_DSB_UOPS"),
    ("r1879:u", "", "IDQ.ALL_DSB_CYCLES_ANY_UOPS"),
    ("r1879:u", "", "IDQ.ALL_DSB_CYCLES_4_UOPS"),
    ("r2079:u", "", "IDQ.MS_MITE_UOPS"),
    ("r2479:u", "", "IDQ.ALL_MITE_CYCLES_ANY_UOPS"),
    ("r2479:u", "", "IDQ.ALL_MITE_CYCLES_4_UOPS"),
    ("r3079:u", "", "IDQ.MS_UOPS"),
    ("r3C79:u", "", "IDQ.MITE_ALL_UOPS"),
    ("r0280:u", "", "ICACHE.MISSES"),
    ("r0185:u", "", "ITLB_MISSES.MISS_CAUSES_A_WALK"),
    ("r0285:u", "", "ITLB_MISSES.WALK_COMPLETED"),
    ("r0485:u", "", "ITLB_MISSES.WALK_DURATION"),
    ("r1085:u", "", "ITLB_MISSES.STLB_HIT"),
    ("r0187:u", "", "ILD_STALL.LCP"),
    ("r0487:u", "", "ILD_STALL.IQ_FULL"),
    ("r0188:u", "", "BR_INST_EXEC.COND"),
    ("r0288:u", "", "BR_INST_EXEC.DIRECT_JMP"),
    ("r0488:u", "", "BR_INST_EXEC.INDIRECT_JMP_NON_CALL_RET"),
    ("r0888:u", "", "BR_INST_EXEC.RETURN_NEAR"),
    ("r1088:u", "", "BR_INST_EXEC.DIRECT_NEAR_CALL"),
    ("r2088:u", "", "BR_INST_EXEC.INDIRECT_NEAR_CALL"),
    ("r4088:u", "", "BR_INST_EXEC.NONTAKEN"),
    ("r8088:u", "", "BR_INST_EXEC.TAKEN"),
    ("rFF88:u", "", "BR_INST_EXEC.ALL_BRANCHES"),
    ("r0189:u", "", "BR_MISP_EXEC.COND"),
    ("r0489:u", "", "BR_MISP_EXEC.INDIRECT_JMP_NON_CALL_RET"),
    ("r0889:u", "", "BR_MISP_EXEC.RETURN_NEAR"),
    ("r1089:u", "", "BR_MISP_EXEC.DIRECT_NEAR_CALL"),
    ("r2089:u", "", "BR_MISP_EXEC.INDIRECT_NEAR_CALL"),
    ("r4089:u", "", "BR_MISP_EXEC.NONTAKEN"),
    ("r8089:u", "", "BR_MISP_EXEC.TAKEN"),
    ("rFF89:u", "", "BR_MISP_EXEC.ALL_BRANCHES"),
    ("r019C:u", "", "IDQ_UOPS_NOT_DELIVERED.CORE"),
    ("r01A1:u", "", "UOPS_DISPATCHED_PORT.PORT_0"),
    ("r02A1:u", "", "UOPS_DISPATCHED_PORT.PORT_1"),
    ("r04A1:u", "", "UOPS_DISPATCHED_PORT.PORT_2_LD"),
    ("r08A1:u", "", "UOPS_DISPATCHED_PORT.PORT_2_STA"),
    ("r0CA1:u", "", "UOPS_DISPATCHED_PORT.PORT_2"),
    ("r10A1:u", "", "UOPS_DISPATCHED_PORT.PORT_3_LD"),
    ("r20A1:u", "", "UOPS_DISPATCHED_PORT.PORT_3_STA"),
    ("r30A1:u", "", "UOPS_DISPATCHED_PORT.PORT_3"),
    ("r40A1:u", "", "UOPS_DISPATCHED_PORT.PORT_4"),
    ("r80A1:u", "", "UOPS_DISPATCHED_PORT.PORT_5"),
    ("r01A2:u", "", "RESOURCE_STALLS.ANY"),
    ("r04A2:u", "", "RESOURCE_STALLS.RS"),
    ("r08A2:u", "", "RESOURCE_STALLS.SB"),
    ("r10A2:u", "", "RESOURCE_STALLS.ROB"),
    ("r01A3:u", "", "CYCLE_ACTIVITY.CYCLES_L2_PENDING"),
    ("r02A3:u", "", "CYCLE_ACTIVITY.CYCLES_LDM_PENDING"),
    ("r04A3:u", "", "CYCLE_ACTIVITY.CYCLES_NO_EXECUTE"),
    ("r05A3:u", "", "CYCLE_ACTIVITY.STALLS_L2_PENDING"),
    ("r08A3:u", "", "CYCLE_ACTIVITY.CYCLES_L1D_PENDING"),
    ("r01A8:u", "", "LSD.UOPS"),
    ("r01AB:u", "", "DSB2MITE_SWITCHES.COUNT"),
    ("r02AB:u", "", "DSB2MITE_SWITCHES.PENALTY_CYCLES"),
    ("r08AC:u", "", "DSB_FILL.EXCEED_DSB_LINES"),
    ("r01AE:u", "", "ITLB.ITLB_FLUSH"),
    ("r01B0:u", "", "OFFCORE_REQUESTS.DEMAND_DATA_RD"),
    ("r02B0:u", "", "OFFCORE_REQUESTS.DEMAND_CODE_RD"),
    ("r04B0:u", "", "OFFCORE_REQUESTS.DEMAND_RFO"),
    ("r08B0:u", "", "OFFCORE_REQUESTS.ALL_DATA_RD"),
    ("r01B1:u", "", "UOPS_EXECUTED.THREAD"),
    ("r02B1:u", "", "UOPS_EXECUTED.CORE"),
    ("r01B7:u", "", "OFFCORE_RESPONSE_0"),
    ("r01BB:u", "", "OFFCORE_RESPONSE_1"),
    ("r01BD:u", "", "TLB_FLUSH.DTLB_THREAD"),
    ("r20BD:u", "", "TLB_FLUSH.STLB_ANY"),
    ("r00C0:u", "", "INST_RETIRED.ANY_P"),
    ("r01C0:u", "", "INST_RETIRED.ALL"),
    ("r08C1:u", "", "OTHER_ASSISTS.AVX_STORE"),
    ("r10C1:u", "", "OTHER_ASSISTS.AVX_TO_SSE"),
    ("r20C1:u", "", "OTHER_ASSISTS.SSE_TO_AVX"),
    ("r01C2:u", "", "UOPS_RETIRED.ALL"),
    ("r02C2:u", "", "UOPS_RETIRED.RETIRE_SLOTS"),
    ("r02C3:u", "", "MACHINE_CLEARS.MEMORY_ORDERING"),
    ("r04C3:u", "", "MACHINE_CLEARS.SMC"),
    ("r20C3:u", "", "MACHINE_CLEARS.MASKMOV"),
    ("r00C4:u", "", "BR_INST_RETIRED.ALL_BRANCHES"),
    ("r01C4:u", "", "BR_INST_RETIRED.CONDITIONAL"),
    ("r02C4:u", "", "BR_INST_RETIRED.NEAR_CALL"),
    ("r04C4:u", "", "BR_INST_RETIRED.ALL_BRANCHES"),
    ("r08C4:u", "", "BR_INST_RETIRED.NEAR_RETURN"),
    ("r10C4:u", "", "BR_INST_RETIRED.NOT_TAKEN"),
    ("r20C4:u", "", "BR_INST_RETIRED.NEAR_TAKEN"),
    ("r40C4:u", "", "BR_INST_RETIRED.FAR_BRANCH"),
    ("r00C5:u", "", "BR_MISP_RETIRED.ALL_BRANCHES"),
    ("r01C5:u", "", "BR_MISP_RETIRED.CONDITIONAL"),
    ("r02C5:u", "", "BR_MISP_RETIRED.NEAR_CALL"),
    ("r04C5:u", "", "BR_MISP_RETIRED.ALL_BRANCHES"),
    ("r10C5:u", "", "BR_MISP_RETIRED.NOT_TAKEN"),
    ("r20C5:u", "", "BR_MISP_RETIRED.TAKEN"),
    ("r02CA:u", "", "FP_ASSIST.X87_OUTPUT"),
    ("r04CA:u", "", "FP_ASSIST.X87_INPUT"),
    ("r08CA:u", "", "FP_ASSIST.SIMD_OUTPUT"),
    ("r10CA:u", "", "FP_ASSIST.SIMD_INPUT"),
    ("r1ECA:u", "", "FP_ASSIST.ANY"),
    ("r20CC:u", "", "ROB_MISC_EVENTS.LBR_INSERTS"),
    ("r01CD:u", "", "MEM_TRANS_RETIRED.LOAD_LATENCY"),
    ("r02CD:u", "", "MEM_TRANS_RETIRED.PRECISE_STORE"),
    ("r01D0:u", "", "MEM_UOPS_RETIRED.LOADS"),
    ("r02D0:u", "", "MEM_UOPS_RETIRED.STORES"),
    ("r10D0:u", "", "MEM_UOPS_RETIRED.STLB_MISS"),
    ("r20D0:u", "", "MEM_UOPS_RETIRED.LOCK"),
    ("r40D0:u", "", "MEM_UOPS_RETIRED.SPLIT"),
    ("r80D0:u", "", "MEM_UOPS_RETIRED.ALL"),
    ("r01D1:u", "", "MEM_LOAD_UOPS_RETIRED.L1_HIT"),
    ("r02D1:u", "", "MEM_LOAD_UOPS_RETIRED.L2_HIT"),
    ("r04D1:u", "", "MEM_LOAD_UOPS_RETIRED.LLC_HIT"),
    ("r20D1:u", "", "MEM_LOAD_UOPS_RETIRED.LLC_MISS"),
    ("r40D1:u", "", "MEM_LOAD_UOPS_RETIRED.HIT_LFB"),
    ("r01D2:u", "", "MEM_LOAD_UOPS_LLC_HIT_RETIRED.XSNP_MISS"),
    ("r02D2:u", "", "MEM_LOAD_UOPS_LLC_HIT_RETIRED.XSNP_HIT"),
    ("r04D2:u", "", "MEM_LOAD_UOPS_LLC_HIT_RETIRED.XSNP_HITM"),
    ("r08D2:u", "", "MEM_LOAD_UOPS_LLC_HIT_RETIRED.XSNP_NONE"),
    ("r01D3:u", "", "MEM_LOAD_UOPS_LLC_MISS_RETIRED.LOCAL_DRAM"),
    ("r1FE6:u", "", "BACLEARS.ANY"),
    ("r01F0:u", "", "L2_TRANS.DEMAND_DATA_RD"),
    ("r02F0:u", "", "L2_TRANS.RFO"),
    ("r04F0:u", "", "L2_TRANS.CODE_RD"),
    ("r08F0:u", "", "L2_TRANS.ALL_PF"),
    ("r10F0:u", "", "L2_TRANS.L1D_WB"),
    ("r20F0:u", "", "L2_TRANS.L2_FILL"),
    ("r40F0:u", "", "L2_TRANS.L2_WB"),
    ("r80F0:u", "", "L2_TRANS.ALL_REQUESTS"),
    ("r01F1:u", "", "L2_LINES_IN.I"),
    ("r02F1:u", "", "L2_LINES_IN.S"),
    ("r04F1:u", "", "L2_LINES_IN.E"),
    ("r07F1:u", "", "L2_LINES_IN.ALL"),
    ("r01F2:u", "", "L2_LINES_OUT.DEMAND_CLEAN"),
    ("r02F2:u", "", "L2_LINES_OUT.DEMAND_DIRTY"),
    ("r04F2:u", "", "L2_LINES_OUT.PF_CLEAN"),
    ("r08F2:u", "", "L2_LINES_OUT.PF_DIRTY"),
    ("r0AF2:u", "", "L2_LINES_OUT.DIRTY_ALL")
])

data = []

def benchmark(repeat, env_offset, env_incr, arg_offset, arg_incr, program):
    env = {'X': '0' * env_offset}
    arg = arg_offset;

    # Measure all counters under x different environments
    for x in range(len(data[0]['count'])):

        # Sample at most 4 counters each invocation of perf
        for i in range(0, len(data), 4):
            current = data[i:i + 4]

            prfevnt = ','.join(map(lambda (row): row['mnemonic'] if row['mnemonic'] != "" else row['code'], current))
            command = 'perf stat -r ' + str(repeat) + ' -x"," -e '+ prfevnt + ' ' + program + ' ' + str(arg)
            process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env, shell=True)

            for row in current:
                row['count'][x] = float(process.stderr.readline().strip().split(',')[0])

            process.wait()

        env['X'] += '0' * env_incr
        arg      += arg_incr;

def correlate(reference_event):
    reference = None
    for event in data:
        if event['code'] == reference_event or event['mnemonic'] == reference_event:
            reference = event
            break
    if reference != None:
        numpy.seterr(invalid='ignore')
        for event in data:
            event['correlation'], _ = stats.pearsonr( reference['count'], event['count'] )

def export():
    print "# Output of `" + ' '.join(sys.argv) + "`"
    print "# Created on", datetime.datetime.now()
    print "#"
    for event in data:
        perfcode = event['mnemonic'] if event['mnemonic'] != "" else event['code']
        mnemonic = event['description']
        row = [mnemonic, perfcode, str(event['correlation'])] + map(str, event['count'])
        print ','.join(row)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Automated perf runner for varying execution contexts')
    parser.add_argument('program', help='Program to be run')
    parser.add_argument('-e', '--events', default=None, help="Comma separated four digit hexadecimal event code, or perf mnemonic")
    parser.add_argument('-n', '--iterations', default=2)
    parser.add_argument('-r', '--repeat', default=1)
    parser.add_argument('--correlate', default='cycles:u')
    parser.add_argument('--env-offset', default=0, help="Number of bytes initially added to environment")
    parser.add_argument('--env-increment', default=1, help="Number of bytes to increment environment each run")
    parser.add_argument('--arg-offset', default=0, help="Initial program argument, integer value")
    parser.add_argument('--arg-increment', default=0, help="Program argument increment between each run, iteger value")
    args = parser.parse_args()

    # Disable ASLR to make memory layout deterministic
    subprocess.call('sudo bash -c "echo 0 > /proc/sys/kernel/randomize_va_space"', shell=True)

    events = performance_counters if args.events == None else args.events.strip().lower().split(',')
    events = filter(lambda (code, mnemonic, _): code in events or mnemonic in events, performance_counters)

    iterations = int(args.iterations)

    for code, mnemonic, description in events:
        data.append(
            { 'code': code, 'mnemonic': mnemonic, 'description': description, 'count': [0] * iterations, 'correlation': 0 }
        )

    benchmark(
        int(args.repeat), int(args.env_offset), int(args.env_increment), 
        int(args.arg_offset), int(args.arg_increment), args.program)

    correlate(args.correlate.lower())

    export( )
