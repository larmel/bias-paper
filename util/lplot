#!/usr/bin/env python
import sys, argparse, string
import matplotlib.pyplot as plt
from matplotlib import rc
from matplotlib.ticker import FuncFormatter, MultipleLocator

# TODO: This needs some cleanup. Purpose is just for quick feedback of perf data,
#       can probably remove much of the functionality for formatting stuff.
def parse_arguments():
    parser = argparse.ArgumentParser(prog="lplot", description='Plot lperf data')
    parser.add_argument("--input", type=argparse.FileType('r'), default="-")
    parser.add_argument('-e', '--events', default='all')
    parser.add_argument('-t', '--title', default='lplot')
    parser.add_argument('-x', '--xlabel', default='')
    parser.add_argument('-y', '--ylabel', default='')
    parser.add_argument('-d', '--dimension', nargs=2, default=(6, 3), metavar=('width', 'height'), type=float)
    parser.add_argument('-l', '--legend', \
        choices=['upper right', 'upper left', 'lower left', 'lower right', 'right', \
                 'center left', 'center right', 'lower center', 'upper center', 'center'],\
        default='upper right')
    parser.add_argument('--legendcols', type=int, default=1)
    parser.add_argument('--export', type=str, default=None)
    parser.add_argument('--ticks', type=int, default=None)
    parser.add_argument('--ybins', type=int, default=None)
    parser.add_argument('--stride', type=int, default=1)
    parser.add_argument('--ylim', type=int, default=None)
    parser.add_argument('--ytickformat', choices=['millions', 'commas'], default='commas')
    parser.add_argument('--fontsize', type=int, default=10)
    args = parser.parse_args()
    args.events = map(string.lower, args.events.strip().split(','))
    return args

def read_file(events, f):
    lines = []
    for line in f:
        if line[0] == '#':
            continue
        e = map(lambda s : s.strip(), line.split(','))
        if events == ['all'] or e[1].lower() in events:
            lines.append({'mnemonic': e[0], 'event': e[1], 'count': map(float, e[3:])})
    return lines

def millions():
    return FuncFormatter( lambda x, _: '%1d' % (x*1e-6) )

def commas():
    return FuncFormatter( lambda x, _: '{:0,d}'.format(int(x)) )

# Draw lines for a single subplot
def plot(data, args):
    plt.xlabel(args.xlabel)
    plt.ylabel(args.ylabel)
    plt.gca().yaxis.set_major_formatter(commas() if args.ytickformat == 'commas' else millions())

    if args.ylim != None:
        plt.gca().set_ylim([0,args.ylim])
    if args.ybins != None:
        plt.locator_params(axis = 'y', nbins=args.ybins)
    if args.ticks != None:
        locator = MultipleLocator(args.ticks)
        plt.gca().xaxis.set_major_locator(locator)

    i = 0
    for line in data:
        label = line['event'] if line['mnemonic'] == '' else line['mnemonic']
        plt.plot([args.stride*v for v in range(len(line['count']))], line['count'], \
            label='{{{e}}}'.format(e=label.replace('_', '\_')))
        i += 1
    plt.grid(True)

    #if args.legend != None:
    #   plt.legend(loc=args.legend, ncol=args.legendcols).draggable()

# Plot data from a list of .csv files in a 2-column layout
def grid(args):
    cols = 1 #2 if len(args.file) > 1 else 1
    rows = 1 #len(args.file) // cols

    rc('text', usetex=True)
    rc('font', family='serif', serif='Computer Modern Roman', size=args.fontsize)
    rc('legend', frameon=True, fontsize=args.fontsize)
    rc('axes', linewidth=0.5, titlesize=args.fontsize, labelsize=args.fontsize)
    rc('lines', linewidth=0.5)
    rc('patch', linewidth=0.5)
    rc('figure', facecolor='white', edgecolor='white', figsize=(args.dimension[0],args.dimension[1]))

    plt.figure(args.title)
    data = read_file(args.events, args.input)
    plt.subplot(rows, cols, 1)
    plot(data, args)

    plt.tight_layout()
    if args.export:
        plt.savefig(args.export)
    plt.show()

if __name__ == '__main__':
    args  = parse_arguments()
    grid(args)
